import compose from 'koa-compose';
import includes from 'lodash/collection/includes';
import intersection from 'lodash/array/intersection';
import keysIn from 'lodash/object/keysIn';
import { get, post, put, del } from 'koa-route';

const VALID_ACTIONS = ['index', 'show', 'create', 'new', 'edit', 'update', 'destroy'];

/**
 * A recursive generator function that yields objects representing each route and their handlers.
 *
 * @param {Object} resources Contains all resources and their actions.
 * @param {String} prefix String to prepend to URL when generating routes.
 * @param {String} resourceName Name of the current resource we are processing.
 *
 * @return {Iterable}
 */
function* getRESTRoutes(resources, prefix = '', resourceName = '') {

  // Determine if this object has actions as properties
  const hasActions = intersection(keysIn(resources), VALID_ACTIONS).length > 0;

  // Iterate through resource object
  for (const key in resources) {
    // If we encounter an action, append a new route
    if (includes(VALID_ACTIONS, key)) {
      // Check for invariant violations
      if (typeof resources[key] !== 'function')
        throw Error(`Action '${key}' must be a function.`);
      if (resourceName === '')
        throw Error(`Action '${key}' cannot be put in the root resource object.`);

      switch (key) {
      case 'index':
        yield get(`${prefix}/${resourceName}`, resources.index);
        break;
      case 'show':
        yield get(`${prefix}/${resourceName}/:${resourceName}Param`, resources.show);
        break;
      case 'new':
        yield get(`${prefix}/${resourceName}/new`, resources.new);
        break;
      case 'create':
        yield post(`${prefix}/${resourceName}`, resources.create);
        break;
      case 'edit':
        yield get(`${prefix}/${resourceName}/:${resourceName}Param/edit`, resources.edit);
        break;
      case 'update':
        yield put(`${prefix}/${resourceName}/:${resourceName}Param`, resources.update);
        break;
      case 'destroy':
        yield del(`${prefix}/${resourceName}/:${resourceName}Param`, resources.destroy);
        break;
      default:
      }
    } else if (resources !== null && typeof resources === 'object') {
      let innerPrefix;

      // Determine prefix to send to inner resource
      if (resourceName === '') {
        innerPrefix = prefix;
      } else if (hasActions) {
        innerPrefix = `${prefix}/${resourceName}/:${resourceName}Param`;
      } else {
        innerPrefix = `${prefix}/${resourceName}`;
      }

      // Iterate through inner resources
      yield* getRESTRoutes(resources[key], innerPrefix, key);
    }
  }
}

/**
 * Creates the middleware given resources and their actions.
 *
 * @param {Object} resources Contains all resources and their actions.
 *
 * @return {GeneratorFunction} The middleware.
 */
export default function resourceRoutes(resources) {
  // Use koa-compose on all REST middlewares generated by getRESTRoutes
  return compose(Array.from(getRESTRoutes(resources)));
}
