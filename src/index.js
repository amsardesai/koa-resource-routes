import compose from 'koa-compose';
import includes from 'lodash/collection/includes';
import intersection from 'lodash/array/intersection';
import keysIn from 'lodash/object/keysIn';

import route from './routes';

// Function constants representing each URL scheme
const URL_WITH_NAME = name => `/${name}`;
const URL_WITH_PARAM = name => `/${name}/:${name}Param`;
const URL_EMPTY = () => '';

// Constant containing our actions
const ACTIONS = {
  'index': {
    method: 'get',
    url: URL_WITH_NAME,
    similar: ['create'],
  },
  'show': {
    method: 'get',
    url: URL_WITH_PARAM,
    similar: ['update', 'destroy'],
  },
  'create': {
    method: 'post',
    url: URL_WITH_NAME,
    similar: ['index'],
  },
  'update': {
    method: 'put',
    url: URL_WITH_PARAM,
    similar: ['show', 'destroy'],
  },
  'destroy': {
    method: 'delete',
    url: URL_WITH_PARAM,
    similar: ['show', 'update'],
  },
};

/**
 * A simple middleware that responds to disallowed methods with a 405 response.
 *
 * @param {Array.<String>} actionList List of implemented actions
 * @param {Array.<String>} similarActions List of relevant actions
 *
 * @return {GeneratorFunction}
 */
function methodNotAllowed(actionList, similarActions) {
  const methods = intersection(actionList, similarActions).map(
    action => ACTIONS[action].method.toUpperCase()
  );

  return function* middleware(next) {
    this.status = 405;
    this.set('Allow', methods.join(','));
    yield* next;
  };
}

/**
 * A recursive generator function that yields koa-route middlewares for each route.
 *
 * @param {Object} resources Contains all resources and their actions.
 * @param {String} prefix String to prepend to URL when generating routes.
 * @param {String} resourceName Name of the current resource we are processing.
 *
 * @return {Iterable}
 */
function* getMiddlewares(resources, prefix = '', resourceName = '') {
  // If our resources object is null, return
  if (resources === null || typeof resources !== 'object') return;

  // Extract resource keys, and remove any key that starts in an underscore
  const resourceKeys = keysIn(resources).filter(key => key[0] !== '_');

  // Determine if this object has actions as properties
  const actionList = intersection(resourceKeys, keysIn(ACTIONS));
  const hasActions = actionList.length > 0;

  // Iterate through each action if we have at least one action
  if (hasActions) {
    // Check for invariant violations
    if (resourceName === '') {
      throw Error('The root resource object cannot contain actions.');
    }

    for (const name in ACTIONS) {
      // Check for invariant violations
      if (typeof resources[name] !== 'undefined' && typeof resources[name] !== 'function') {
        throw Error(`Action '${name}' must be a function.`);
      }

      const action = ACTIONS[name];
      yield route[action.method.toUpperCase()](
        `${prefix}${action.url(resourceName)}`,
        resources[name] || methodNotAllowed(actionList, action.similar)
      );
    }
  }

  // Iterate through the rest of the methods (non-actions)
  for (let index = 0; index < resourceKeys.length; index++) {
    const key = resourceKeys[index];
    if (!includes(keysIn(ACTIONS), key)) {
      let url;

      // Decide which URL scheme to send down the recursive chain
      if (resourceName === '') {
        url = URL_EMPTY;
      } else if (hasActions) {
        url = URL_WITH_PARAM;
      } else {
        url = URL_WITH_NAME;
      }

      // Iterate through inner resources
      yield* getMiddlewares(resources[key], `${prefix}${url(resourceName)}`, key);
    }
  }
}

/**
 * Creates the middleware given resources and their actions.
 *
 * @param {Object} resources Contains all resources and their actions.
 *
 * @return {GeneratorFunction} The middleware.
 */
export default function resourceRoutes(resources) {
  // Use koa-compose on all REST middlewares generated by getMiddlewares
  return compose(Array.from(getMiddlewares(resources)));
}
